<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Box, | Dev Continuum]]></title>
  <link href="http://vinnymac.github.io/blog/categories/box/atom.xml" rel="self"/>
  <link href="http://vinnymac.github.io/"/>
  <updated>2015-07-22T14:52:12-04:00</updated>
  <id>http://vinnymac.github.io/</id>
  <author>
    <name><![CDATA[Vincent Taverna]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Boxviewrb]]></title>
    <link href="http://vinnymac.github.io/blog/2014/06/11/boxviewrb/"/>
    <updated>2014-06-11T20:06:09-04:00</updated>
    <id>http://vinnymac.github.io/blog/2014/06/11/boxviewrb</id>
    <content type="html"><![CDATA[<h3>onStart</h3>

<p>I took a bit of a blogging hiatus during my vacation recently. I used this time to start working on an open source project called <a href="https://github.com/getlua/boxviewrb">boxviewrb</a>. <a href="https://github.com/getlua/boxviewrb">Boxviewrb</a> is a Box View API Wrapper written in ruby. It uses the <a href="http://johnnunemaker.com/httparty/">HTTParty</a> gem for network calls, and also supports multipart uploading. Alternative gems for Box View do exist. However, they are incomplete implementations, some old that have not been updated (crocodoc), and others that just did not offer a complete feature set. <a href="https://github.com/getlua/boxviewrb">Boxviewrb</a> works with every request and feature that the Box View API has documented. Test coverage is minimal, only some of the requests have tests, but I am meaning to add more coverage in the future. I attempted to make the documentation as readable and self explanatory as I possibly could. This is my first time ever releasing a piece of open source software, and it certainly will not be my last. Instructions on how to contribute can be found at the bottom of the readme.</p>

<h3>onFinish</h3>

<p>In previous articles I wrote about communicating with the Box View API using Net::HTTP. Based on this primitive example I was able to make an open source gem. If you read over my documentation, you will notice the convenience methods. They came in handy when placing Box View in a production application. At <a href="http://getlua.com">Lua</a> we now have document viewing right in the browser! If you would like this feature in a site you&rsquo;re running, give my gem a try. As always if you have any concerns or questions drop a comment below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[BoxView]]></title>
    <link href="http://vinnymac.github.io/blog/2014/05/18/boxview/"/>
    <updated>2014-05-18T21:51:11-04:00</updated>
    <id>http://vinnymac.github.io/blog/2014/05/18/boxview</id>
    <content type="html"><![CDATA[<h3>onStart</h3>

<p>The <a href="https://developers.box.com/view/">BoxViewAPI</a> is useful for displaying documents in the browser without needing to do any heavy lifting. You can quickly turn any PDF, MS Document, or MS PowerPoint into HTML and display it inline on your website. The HTML is hosted by Box, and you can easily display this on your site by using an iFrame. Alternatively you could download the HTML and display it with viewer.js. Make sure you <a href="https://app.box.com/">signup</a> and <a href="https://app.box.com/developers/services">create a BoxView app</a> before you start. The app will have an API key that you will need in all requests you make with Box. I am implementing it in Rails, but you could do this on any backend in exactly the same fashion.</p>

<h3>Upload a Document</h3>

<p>The first step to making a viewable document is uploading the file to box. I decided to use the net::http library when communicating with the BoxViewAPI. However, you can use any RESTful lib. RestClient is another popular one. Then make a post with the necessary headers. The response if successful will contain a document id.</p>

<p>```ruby
  # Headers used throughout these examples
  # Get YOUR_API_KEY from the box view application page
  BOX_HEADERS = {</p>

<pre><code>'Authorization' =&gt; "Token #{YOUR_API_KEY}",
'Content-type' =&gt; 'application/json'
</code></pre>

<p>  }</p>

<p>  def upload_document</p>

<pre><code>document_uri = URI.parse("https://view-api.box.com/1/documents")
data = {
  'url' =&gt; original_url
  # If thumbnails are desired:
  #, 'thumbnails' =&gt; '100x100'
}
http = Net::HTTP.new(document_uri.host, document_uri.port)
http.use_ssl = true
request = Net::HTTP::Post.new(document_uri.path, BOX_HEADERS)
request.body = data.to_json
response = http.request(request)
parsed = JSON.parse response.body
document_id = parsed["id"]
return document_id
# or self.update_attribute :document_id, document_id
</code></pre>

<p>  end
```</p>

<h3>Create a Session</h3>

<p>Now that you have a document id, you can make upload_document return the id or just save it to a model (This is useful if you&rsquo;re interested in implementing WebHooks). Next you can use that document id to create a session which will begin the conversion of the document, and let you know when it is ready. If you are using this in your web app frequently, I recommend using <a href="http://sidekiq.org/">Sidekiq</a> to offload all these network calls and possible database saves to an asynchronous process. When successful, box will return a 201, which means the document is ready for viewing. If you don&rsquo;t get a 201 you will get a 202 or 400 response code. A 202 means the document is not yet ready for viewing. A 400 means the conversion has failed. If you&rsquo;d like to view your file at this point, just head over to <a href="https://view-api.box.com/1/sessions/{session%20id}/view?theme=light">https://view-api.box.com/1/sessions/{session id}/view?theme=light</a>, where session id is the id you get from the 201 response.</p>

<p>```ruby
  def create_session(document_id)</p>

<pre><code>session_uri = URI.parse("https://view-api.box.com/1/sessions")
data = {
  "document_id" =&gt; document_id
  #, "expires_at" =&gt; Time.now + 1.hour
  # You could specify an expiration date.
}
http = Net::HTTP.new(session_uri.host, session_uri.port)
http.use_ssl = true
request = Net::HTTP::Post.new(session_uri.path, BOX_HEADERS)
request.body = data.to_json
response = http.request(request)
case response.code
when "201" # Done converting
  parsed = JSON.parse response.body
  session_id = parsed["id"]
  return session_id
  # or self.update_attribute :session_id, session_id
when "202" # Session not ready yet
  time = response['Retry-After'].to_i
  # here you would retry based on the time variable
  # You could use sidekiqs perform_in method, or just sleep
when "400" # An error occurred while converting the document or the document does not exist
  Rails.logger.debug "Document failed to convert - #{response.body}"
else
  raise "BoxSessionError #{response.inspect}"
end
</code></pre>

<p>  end
```</p>

<h3>Generate a Thumbnail</h3>

<p>A cool feature BoxView has is thumbnail generation. It can return a thumbnail of any size 16-1024 wide by 16-768 high. This way you can see a preview of the document before displaying it to a user. The BoxView API only requires a height and width, and the document that you want the thumbnail generated from.</p>

<p>```ruby
  def generate_thumbnail(document_id)</p>

<pre><code>query_params = "?width=100&amp;height=100"
thumbnail_uri = URI.parse("https://view-api.box.com/1/documents/#{document_id}/thumbnail")
http = Net::HTTP.new(thumbnail_uri.host, thumbnail_uri.port)
http.use_ssl = true
thumbnail_path = thumbnail_uri.path + params
request = Net::HTTP::Get.new(thumbnail_path, BOX_HEADERS)
response = http.request(request)
case response.code
when "200" # Valid thumbnail
  thumbnail = response.body
  # Now upload the thumbnail to another server
  # or use it however you would like
when "202" # Thumbnail isn't ready yet
  time = response['Retry-After'].to_i
  # Same as a session 202, sleep or worker
when "400" # Width/Height are invalid
  Rails.logger.debug "400 Box Thumbnail Width x Height Invalid - #{response.body}"
else
  raise "BoxThumbnailError #{response.inspect}"
end
</code></pre>

<p>  end
```</p>

<p>Box offers a chance of producing the thumbnail earlier in the process. If you state the width and height earlier when uploading the document, box will have the thumbnail ready by the time you call generate_thumbnail. After getting the thumbnail from the response you could upload it to your own server.</p>

<h3>onFinish</h3>

<p>My examples above are all in ruby, but their also exists a <a href="https://view-upload.herokuapp.com/">great python project on GitHub</a> that shows how to do the same. If you needed help getting started with BoxView I hope you no longer do. If you require WebHooks with BoxView, they aren&rsquo;t very difficult. Just email <a href="&#109;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#97;&#x70;&#105;&#64;&#x62;&#111;&#120;&#46;&#x63;&#111;&#109;">&#97;&#x70;&#105;&#x40;&#98;&#x6f;&#120;&#x2e;&#x63;&#x6f;&#109;</a> with your API key and domain to send the responses to a controller. If you want to test that WebHooks work in your testing environment, I recommend using <a href="https://ngrok.com">ngrok</a>. It helped me confirm everything was in a good working condition before using it in other environments. As always, if you need help let me know.</p>
]]></content>
  </entry>
  
</feed>
