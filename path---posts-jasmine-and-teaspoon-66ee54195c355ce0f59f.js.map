{"version":3,"sources":["webpack:///path---posts-jasmine-and-teaspoon-66ee54195c355ce0f59f.js","webpack:///./.cache/json/posts-jasmine-and-teaspoon.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/posts-jasmine-and-teaspoon.json","module","exports","data","site","siteMetadata","title","subtitle","copyright","author","name","twitter","markdownRemark","id","html","fields","tagSlugs","frontmatter","tags","date","description","pathContext","slug"],"mappings":"AAAAA,cAAc,qBAERC,oFACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,gBAAAC,SAAA,oBAAAC,UAAA,yBAAAC,QAAsGC,KAAA,kBAAAC,QAAA,qCAAuEC,gBAAmBC,GAAA,0IAAAC,KAAA,07bAAAC,QAA+idC,UAAA,0DAAqEC,aAAgBX,MAAA,uBAAAY,MAAA,mCAAAC,KAAA,2BAAAC,YAAA,QAAiIC,aAAgBC,KAAA","file":"path---posts-jasmine-and-teaspoon-66ee54195c355ce0f59f.js","sourcesContent":["webpackJsonp([11235116163386335000],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/posts-jasmine-and-teaspoon.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Dev Continuum\",\"subtitle\":\"Software Engineer\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"Vincent Taverna\",\"twitter\":\"https://twitter.com/kidtheflash\"}}},\"markdownRemark\":{\"id\":\"/Users/vinnymac/Sites/vinnymac.github.io/src/pages/articles/2014-04-21-jasmine-and-teaspoon/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>onStart</h3>\\n<p>In the case of writing tests for your javascript/coffeescript apps you will find that Jasmine is one of the best options. It is easy to add to by improving its matchers, and it is flexible enough to test more difficult subjects like asynchronous calls or mock/stub events and data. If you are currently looking for a way to test the front end of your website or javascript app you will not regret using jasmine to do so.</p>\\n<h3>Getting Started with Teaspoon</h3>\\n<p>When testing with Jasmine I found it easiest to use <a href=\\\"https://github.com/modeset/teaspoon\\\">Teaspoon</a> alongside to easily setup a testing environment. Teaspoon has many benefits. They offer support for command line testing as well as testing in the browser. Teaspoon automatically generates a spec helper so that you can easily require your front end app. Combine this with Stub/Mocking with <a href=\\\"https://github.com/froots/jasmine-sinon\\\">jasmine-sinon</a> and <a href=\\\"https://github.com/velesin/jasmine-jquery\\\">jasmine-jquery</a> and you will have all the testing tools you could want on the front end.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Add these lines to your Gemfile</span>\\ngroup <span class=\\\"token symbol\\\">:development</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token symbol\\\">:test</span> <span class=\\\"token keyword\\\">do</span>\\n  gem <span class=\\\"token string\\\">\\\"teaspoon\\\"</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Teaspoon can use selenium or phantomjs</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># gem \\\"phantomjs\\\", \\\">= 1.8.1.1\\\"</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>After setting up your gemfile, you can run bundler. Then execute the following line in your terminal. You can specify a framework, in my case I am using Jasmine, but Teaspoon supports other as well, such as Mocha. I also love to use coffeescript when testing, so I append —coffee to the end of the command to tell Teaspoon I will be writing coffee files.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>rails generate teaspoon:install --framework=jasmine --coffee</code></pre>\\n      </div>\\n<p>You can run your tests by visiting <a href=\\\"http://localhost:3000/teaspoon\\\">http://localhost:3000/teaspoon</a>. Where 3000 is the port you run your server on.\\nAlternatively you can run the Teaspoon test suites by typing rake teaspoon in the command line. They both have benefits, but ultimately you may find yourself wanting to run your tests using Guard. That way you can run your tests while you develop. If you are interested in using Guard with Teaspoon, I recommend reading about <a href=\\\"https://github.com/modeset/guard-teaspoon\\\">guard-teaspoon</a>.</p>\\n<h3>Writing Jasmine Tests</h3>\\n<p>Now that you have setup Teaspoon you can get to the fun part. I recommend reading Jasmines documentation, they have a lot of great examples on the various types of tests you may come across when testing a front end. In my case below, I am testing my backbone model Person, and the attributes that exist on it by default. If you want open a new file in the jasmine folder that Teaspoon generated. In my case it would be person_spec.coffee.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-coffeescript\\\"><code>describe <span class=\\\"token string\\\">\\\"Person\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># If you want to do something before each test</span>\\n  beforeEach <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    person <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">People<span class=\\\"token punctuation\\\">.</span>Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  it <span class=\\\"token string\\\">'should be alive'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeDefined</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  it <span class=\\\"token string\\\">'should have a name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># underscore method</span>\\n\\n  it <span class=\\\"token string\\\">'should have a favorite food'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'food'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Pizza\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  it <span class=\\\"token string\\\">'should have an identification'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># If you want to write the boilerplate</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># for a test you haven't finished yet</span>\\n  xit <span class=\\\"token string\\\">'can die'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Testing a method on a model</span>\\n  it <span class=\\\"token string\\\">'should have a creator'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">creator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Vinny\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h3>Creating Matchers</h3>\\n<p>So now that you have written a test, maybe you want to expand the tools you have at your disposal when testing in Jasmine. Matchers make it easy to create new tools you can use for testing. If you have the <a href=\\\"http://underscorejs.org/\\\">UnderscoreJS</a> library, you can easily add some matchers to Jasmine that will make testing better. In order to start adding matchers, open up your spec_helper file that Teaspoon generated. At the end of this file you can add any matchers you might want when writing your tests.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-coffeescript\\\"><code>beforeEach <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Executes this code before each test.</span>\\n  <span class=\\\"token class-member variable\\\">@addMatchers</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Tells Jasmine to add these matchers</span>\\n    <span class=\\\"token property\\\">toBeOfType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token class-member variable\\\">@actual</span> <span class=\\\"token keyword\\\">is</span> type <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># @actual points to the expected value</span>\\n    <span class=\\\"token property\\\">toBeNaN</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isNaN <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeDate</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isDate <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeEmpty</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isEmpty <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeArray</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isArray <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeObject</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isObject <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeRegExp</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isRegExp <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeFinite</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isFinite <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeString</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isString <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeNumber</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isNumber <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeElement</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isElement <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeBoolean</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isBoolean <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeFunction</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isFunction <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toHaveArguments</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isArguments <span class=\\\"token class-member variable\\\">@actual</span>\\n</code></pre>\\n      </div>\\n<p>By using a library like underscore you retain the testing environment that Jasmine creates, even when doing comparisons like expecting a handful of arguments. By adding matchers your tests become more clear and concise. Being able to write thin self explanatory tests is priceless. Especially when the magic is coming from a spec helper that you yourself have written.</p>\\n<h3>onFinish</h3>\\n<p>Hopefully this brief overview of Teaspoon will give you the jump start you need to get into front end testing. Testing is invaluable, and I recommend doing it for more than just your front end if you can. If you have any problems while testing with Jasmine or just want some help, leave a comment below.</p>\",\"fields\":{\"tagSlugs\":[\"/tags/jasmine/\",\"/tags/teaspoon/\",\"/tags/java-script/\"]},\"frontmatter\":{\"title\":\"Jasmine and Teaspoon\",\"tags\":[\"Jasmine\",\"Teaspoon\",\"JavaScript\"],\"date\":\"2014-04-21T23:59:13.000Z\",\"description\":null}}},\"pathContext\":{\"slug\":\"/posts/jasmine-and-teaspoon/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---posts-jasmine-and-teaspoon-66ee54195c355ce0f59f.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"Dev Continuum\",\"subtitle\":\"Software Engineer\",\"copyright\":\"© All rights reserved.\",\"author\":{\"name\":\"Vincent Taverna\",\"twitter\":\"https://twitter.com/kidtheflash\"}}},\"markdownRemark\":{\"id\":\"/Users/vinnymac/Sites/vinnymac.github.io/src/pages/articles/2014-04-21-jasmine-and-teaspoon/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<h3>onStart</h3>\\n<p>In the case of writing tests for your javascript/coffeescript apps you will find that Jasmine is one of the best options. It is easy to add to by improving its matchers, and it is flexible enough to test more difficult subjects like asynchronous calls or mock/stub events and data. If you are currently looking for a way to test the front end of your website or javascript app you will not regret using jasmine to do so.</p>\\n<h3>Getting Started with Teaspoon</h3>\\n<p>When testing with Jasmine I found it easiest to use <a href=\\\"https://github.com/modeset/teaspoon\\\">Teaspoon</a> alongside to easily setup a testing environment. Teaspoon has many benefits. They offer support for command line testing as well as testing in the browser. Teaspoon automatically generates a spec helper so that you can easily require your front end app. Combine this with Stub/Mocking with <a href=\\\"https://github.com/froots/jasmine-sinon\\\">jasmine-sinon</a> and <a href=\\\"https://github.com/velesin/jasmine-jquery\\\">jasmine-jquery</a> and you will have all the testing tools you could want on the front end.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-ruby\\\"><code><span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Add these lines to your Gemfile</span>\\ngroup <span class=\\\"token symbol\\\">:development</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token symbol\\\">:test</span> <span class=\\\"token keyword\\\">do</span>\\n  gem <span class=\\\"token string\\\">\\\"teaspoon\\\"</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Teaspoon can use selenium or phantomjs</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># gem \\\"phantomjs\\\", \\\">= 1.8.1.1\\\"</span>\\n<span class=\\\"token keyword\\\">end</span>\\n</code></pre>\\n      </div>\\n<p>After setting up your gemfile, you can run bundler. Then execute the following line in your terminal. You can specify a framework, in my case I am using Jasmine, but Teaspoon supports other as well, such as Mocha. I also love to use coffeescript when testing, so I append —coffee to the end of the command to tell Teaspoon I will be writing coffee files.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-none\\\"><code>rails generate teaspoon:install --framework=jasmine --coffee</code></pre>\\n      </div>\\n<p>You can run your tests by visiting <a href=\\\"http://localhost:3000/teaspoon\\\">http://localhost:3000/teaspoon</a>. Where 3000 is the port you run your server on.\\nAlternatively you can run the Teaspoon test suites by typing rake teaspoon in the command line. They both have benefits, but ultimately you may find yourself wanting to run your tests using Guard. That way you can run your tests while you develop. If you are interested in using Guard with Teaspoon, I recommend reading about <a href=\\\"https://github.com/modeset/guard-teaspoon\\\">guard-teaspoon</a>.</p>\\n<h3>Writing Jasmine Tests</h3>\\n<p>Now that you have setup Teaspoon you can get to the fun part. I recommend reading Jasmines documentation, they have a lot of great examples on the various types of tests you may come across when testing a front end. In my case below, I am testing my backbone model Person, and the attributes that exist on it by default. If you want open a new file in the jasmine folder that Teaspoon generated. In my case it would be person_spec.coffee.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-coffeescript\\\"><code>describe <span class=\\\"token string\\\">\\\"Person\\\"</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># If you want to do something before each test</span>\\n  beforeEach <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    person <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">People<span class=\\\"token punctuation\\\">.</span>Person</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  it <span class=\\\"token string\\\">'should be alive'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeDefined</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  it <span class=\\\"token string\\\">'should have a name'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'name'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeString</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># underscore method</span>\\n\\n  it <span class=\\\"token string\\\">'should have a favorite food'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'food'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Pizza\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  it <span class=\\\"token string\\\">'should have an identification'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">get</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'id'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBeNumber</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># If you want to write the boilerplate</span>\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># for a test you haven't finished yet</span>\\n  xit <span class=\\\"token string\\\">'can die'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n\\n  <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Testing a method on a model</span>\\n  it <span class=\\\"token string\\\">'should have a creator'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n    <span class=\\\"token function\\\">expect</span><span class=\\\"token punctuation\\\">(</span>person<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">creator</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toBe</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">\\\"Vinny\\\"</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<h3>Creating Matchers</h3>\\n<p>So now that you have written a test, maybe you want to expand the tools you have at your disposal when testing in Jasmine. Matchers make it easy to create new tools you can use for testing. If you have the <a href=\\\"http://underscorejs.org/\\\">UnderscoreJS</a> library, you can easily add some matchers to Jasmine that will make testing better. In order to start adding matchers, open up your spec_helper file that Teaspoon generated. At the end of this file you can add any matchers you might want when writing your tests.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"language-coffeescript\\\"><code>beforeEach <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Executes this code before each test.</span>\\n  <span class=\\\"token class-member variable\\\">@addMatchers</span> <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># Tells Jasmine to add these matchers</span>\\n    <span class=\\\"token property\\\">toBeOfType</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">typeof</span> <span class=\\\"token class-member variable\\\">@actual</span> <span class=\\\"token keyword\\\">is</span> type <span class=\\\"token comment\\\" spellcheck=\\\"true\\\"># @actual points to the expected value</span>\\n    <span class=\\\"token property\\\">toBeNaN</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isNaN <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeDate</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isDate <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeEmpty</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isEmpty <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeArray</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isArray <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeObject</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isObject <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeRegExp</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isRegExp <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeFinite</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isFinite <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeString</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isString <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeNumber</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isNumber <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeElement</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isElement <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeBoolean</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isBoolean <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toBeFunction</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isFunction <span class=\\\"token class-member variable\\\">@actual</span>\\n    <span class=\\\"token property\\\">toHaveArguments</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token operator\\\">-</span><span class=\\\"token operator\\\">></span>\\n      <span class=\\\"token keyword\\\">return</span> _<span class=\\\"token punctuation\\\">.</span>isArguments <span class=\\\"token class-member variable\\\">@actual</span>\\n</code></pre>\\n      </div>\\n<p>By using a library like underscore you retain the testing environment that Jasmine creates, even when doing comparisons like expecting a handful of arguments. By adding matchers your tests become more clear and concise. Being able to write thin self explanatory tests is priceless. Especially when the magic is coming from a spec helper that you yourself have written.</p>\\n<h3>onFinish</h3>\\n<p>Hopefully this brief overview of Teaspoon will give you the jump start you need to get into front end testing. Testing is invaluable, and I recommend doing it for more than just your front end if you can. If you have any problems while testing with Jasmine or just want some help, leave a comment below.</p>\",\"fields\":{\"tagSlugs\":[\"/tags/jasmine/\",\"/tags/teaspoon/\",\"/tags/java-script/\"]},\"frontmatter\":{\"title\":\"Jasmine and Teaspoon\",\"tags\":[\"Jasmine\",\"Teaspoon\",\"JavaScript\"],\"date\":\"2014-04-21T23:59:13.000Z\",\"description\":null}}},\"pathContext\":{\"slug\":\"/posts/jasmine-and-teaspoon/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/posts-jasmine-and-teaspoon.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/posts-jasmine-and-teaspoon.json\n// module chunks = 11235116163386335000"],"sourceRoot":""}