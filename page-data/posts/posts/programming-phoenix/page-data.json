{"componentChunkName":"component---src-templates-post-template-js","path":"/posts//posts/programming-phoenix/","result":{"data":{"markdownRemark":{"id":"90bf25ab-dd61-5e27-a19e-6cdefb5ca81a","html":"<p>Some quotes from Programming Phoenix that inspire</p>\n<blockquote>\n<p>In July 2015, we (Chris McCord) compared\nPhoenix with Ruby on Rails. The firebird was nearly an order of magnitude\nfaster than the locomotive, and it used just over one fourth of the processing\npower and just under one sixth of the total memory. Those numbers are\nstaggering, but not many Rails users are after naked power.</p>\n</blockquote>\n<blockquote>\n<p>In Phoenix, you won’t have to read through dozens of\nskip<em>before</em>filter commands to know how your code works. You’ll just build a\npipeline for each group of routes that work the same way.</p>\n</blockquote>\n<blockquote>\n<p>One continuous problem with web frameworks is that they tend to bloat over\ntime, sometimes fatally. If the underlying abstractions for extending the\nframework are wrong, each new feature will increase complexity until the\nframework collapses under its own weight. Sometimes, the problem is that\nthe web framework doesn’t include enough, and the abstractions for extending\nthe framework aren’t right.\nThis problem is particularly acute with object-oriented languages. Inheritance\nis simply not a rich enough abstraction to represent the entire ecosystem of\na web platform. Inheritance works best when a single feature extends a\nframework across a single dimension. Unfortunately, many ambitious features\nspan several different dimensions.</p>\n</blockquote>\n<blockquote>\n<p>As a developer,\nuntil now, you’ve been forced to make a choice between applications that\nintentionally forget important details to scale and applications that try to\nremember too much and break under load.</p>\n</blockquote>\n<blockquote>\n<p>Phoenix has:\nisolation and concurrency. Isolation guarantees that if a bug affects one\nchannel, all other channels continue running. Breaking one feature won’t\nbleed into other site functionality. Concurrency means one channel can never\nblock another one, whether code is waiting on the database or crunching\ndata. This key advantage means that the UI never becomes unresponsive\nbecause the user started a heavy action.</p>\n</blockquote>\n<blockquote>\n<p>The problem for Rails developers is\nthat the scope of problems it’s best able to solve is rapidly narrowing.</p>\n</blockquote>\n<blockquote>\n<p>If you’re a Java developer looking for where to go next, or a JVM-language\ndeveloper looking for a better concurrency story, Phoenix would mean leaving\nthe JVM behind. Maybe that’s a good thing. You’ll find a unified, integrated\nstory in Phoenix with sound abstractions on top. You’ll see a syntax that\nprovides Clojure-style metaprogramming on syntax that we think is richer\nand cleaner than Scala’s.</p>\n</blockquote>\n<blockquote>\n<p>A web server is a natural problem for\na functional language to solve.</p>\n</blockquote>\n<blockquote>\n<p>In Phoenix, that connection is the whole universe of things we need to know\nabout a user’s request.</p>\n</blockquote>\n<blockquote>\n<p>We process data in the model; we read or write that data through\nthe controller. Ecto allows us to organize our code in this way. It separates\nthe code with side effects, which changes the world around us, from the code\nthat’s only transforming data.</p>\n</blockquote>\n<blockquote>\n<p>the atom table isn’t garbage-collected.</p>\n</blockquote>\n<blockquote>\n<p>Your application is a series of plugs, beginning with an endpoint\nand ending with a controller</p>\n</blockquote>\n<blockquote>\n<p>mix ecto.gen.migration create_user</p>\n</blockquote>","fields":{"slug":"/posts//posts/programming-phoenix/","tagSlugs":["/tag/elixir/","/tag/erlang/","/tag/phoenix/"]},"frontmatter":{"date":"2018-06-23T08:38:00.000Z","description":"Quotes from Programming Phoenix that inspire","tags":["Elixir","Erlang","Phoenix"],"title":"Programming Phoenix","socialImage":null}}},"pageContext":{"slug":"/posts//posts/programming-phoenix/"}},"staticQueryHashes":["251939775","2857265606","401334301"]}